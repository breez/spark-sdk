[package]
name = "breez-sdk-spark"
edition = "2024"
version.workspace = true

[features]
default = ["default-tls"]
browser-tests = [] # Enable browser wasm-pack tests
uniffi = [
    "breez-sdk-common/uniffi",
    "dep:uniffi",
    "openssl-vendored",
]
openssl-vendored = ["openssl"]
test-utils = []
# TLS features
default-tls = ["reqwest/default-tls", "breez-sdk-common/default-tls"]
rustls-tls = ["reqwest/rustls-tls", "breez-sdk-common/rustls-tls"]
native-tls = ["reqwest/native-tls", "breez-sdk-common/native-tls"]

[lib]
crate-type = ["staticlib", "cdylib", "lib"]
name = "breez_sdk_spark"

[lints]
workspace = true

[dependencies]
async-trait.workspace = true
base64.workspace = true
bip39.workspace = true
bitcoin.workspace = true
breez-sdk-common.workspace = true
chrono.workspace = true
clap = { workspace = true, features = ["derive"] }
dotenvy.workspace = true
figment = { workspace = true, features = ["env", "yaml"] }
hex.workspace = true
macros.workspace = true
openssl = { workspace = true, optional = true }
qrcode-rs.workspace = true
reqwest.workspace = true
serde = { workspace = true, features = ["derive"] }
serde_json.workspace = true
shellwords.workspace = true
spark-wallet.workspace = true
tempdir.workspace = true
thiserror.workspace = true
tokio_with_wasm.workspace = true
tracing.workspace = true
tracing-subscriber = { workspace = true, features = ["env-filter"] }
uuid.workspace = true
uniffi = { workspace = true, optional = true }
web-time.workspace = true
x509-parser = { version = "0.16.0" }

# Non-Wasm dependencies
[target.'cfg(not(all(target_family = "wasm", target_os = "unknown")))'.dependencies]
tokio = { workspace = true, features = ["macros", "rt-multi-thread"] }
rusqlite.workspace = true
rusqlite_migration.workspace = true

# WASM dependencies
[target.'cfg(all(target_family = "wasm", target_os = "unknown"))'.dependencies]
tokio = { workspace = true, features = ["macros"] }

[dev-dependencies]
breez-sdk-common = { workspace = true, features = ["test-utils"] }
breez-sdk-spark = { workspace = true, features = ["test-utils"] }

# WASM dev dependencies
[target.'cfg(all(target_family = "wasm", target_os = "unknown"))'.dev-dependencies]
wasm-bindgen-test.workspace = true

[build-dependencies]
uniffi = { workspace = true, features = ["build"], optional = true }
